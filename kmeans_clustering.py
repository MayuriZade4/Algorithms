# -*- coding: utf-8 -*-
"""KMeans_Clustering

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fAaFqNqQblLshCNQLeFErfosUcV-f-K4
"""

#importing all the necessary libraries required for K-Means clustering with visualization and scaling in Python.
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler

df = pd.read_csv('/content/income (2).csv')

df

plt.scatter(df['Age'],df['Income($)'])
plt.xlabel('Age')
plt.ylabel('Income')
plt.grid()

km = KMeans(n_clusters=3)

#This line creates a KMeans clustering model that will group the data into 3 clusters.

y_pred = km.fit_predict(df[['Age','Income($)']])

#This line fits the KMeans model on the two features Age and Income($) and then predicts the cluster label for each row in the DataFrame.

y_pred
#y_pred is:
#A NumPy array containing the cluster labels (like 0, 1, 2) for each row in your dataset, based on the values of 'Age' and 'Income($)'.

df['cluster'] = y_pred
#This line adds a new column called 'cluster' to your DataFrame df, and fills it with the cluster labels stored in y_pred.

df

km.cluster_centers_
#km.cluster_centers_ is an attribute of the KMeans model from scikit-learn in Python.
#It gives you the coordinates of the center (or centroid) of each cluster found by the K-Means algorithm.

df1 =  df[df['cluster'] == 0]
df2 =  df[df['cluster'] == 1]
df3 =  df[df['cluster'] == 2]
#These lines split the original DataFrame (df) into three new DataFrames (df1, df2, df3), based on the value in the 'cluster' column.

plt.scatter(df1['Age'],df1['Income($)'],color = 'green')
plt.scatter(df2['Age'],df2['Income($)'],color = 'red')
plt.scatter(df3['Age'],df3['Income($)'],color = 'blue')

a = km.cluster_centers_

plt.scatter(a[:,0],a[:,1],color = 'black',marker = "*", label = "Centroid")


#Great! You're plotting the clusters and their centroids after performing K-Means. Let's break down each part:
#As we can see in the scatter plot below, the clustering did not happen as expected.
#This is likely because the features (Age and Income($)) were not scaled properly before applying the K-Means algorithm.
#Since K-Means is a distance-based algorithm, differences in scale between features can significantly impact how clusters are formed.
#For more accurate clustering, the data should be standardized using techniques like StandardScaler to bring all features to a similar range.

#This creates a MinMaxScaler object from sklearn.preprocessing, which scales your features to a fixed range — typically [0, 1].
scaler = MinMaxScaler()


#This line fits the scaler to the 'Income($)' column — meaning it calculates the minimum and maximum values of that column.
scaler.fit(df[['Income($)']])


#This line scales the 'Income($)' column using the previously fitted MinMaxScaler and replaces the original values in the DataFrame with the scaled values.
df['Income($)'] = scaler.transform(df[['Income($)']])


#This fits the MinMaxScaler to the 'Age' column — meaning it calculates the minimum and maximum values of 'Age'.
scaler.fit(df[['Age']])

#This line transforms the 'Age' column using the MinMaxScaler that was previously fitted on 'Age', and replaces the original values in the DataFrame with their scaled versions.
df['Age'] = scaler.transform(df[['Age']])

#it will display the current state of your DataFrame.
df

# Below is a 2D scatter plot where:

#Points are between 0 and 1 on both axes (because the data is scaled).
plt.scatter(df.Age,df['Income($)'])

#Creates a new KMeans clustering model with 3 clusters.
km1 = KMeans(n_clusters = 3)



#.fit_predict(df[['Age', 'Income($)']])
#➤ Fits the model to the 2D scaled data (Age and Income)
#➤ Automatically assigns cluster labels to each row (0, 1, or 2)
y_pred = km1.fit_predict(df[['Age','Income($)']])

#A NumPy array of the cluster labels assigned to each row.
y_pred

#This line adds a new column named 'cluster' to your DataFrame df, and fills it with the cluster labels (y_pred) predicted by KMeans.
df['cluster'] = y_pred

#This line adds a new column named 'cluster' to your DataFrame df, and fills it with the cluster labels (y_pred) predicted by KMeans.
km1.cluster_centers_

#splitting the original DataFrame df into 3 separate DataFrames, one for each cluster:

df1 = df[df['cluster']==0]
df2 = df[df['cluster']==1]
df3 = df[df['cluster']==2]

#You're plotting your K-Means clusters perfectly!
plt.scatter(df1['Age'],df1['Income($)'],color = "green")
plt.scatter(df2['Age'],df2['Income($)'],color = "red")
plt.scatter(df3['Age'],df3['Income($)'],color = "Blue")
plt.scatter(km1.cluster_centers_[:,0],km1.cluster_centers_[:,1],color = "black",marker = "*",label = "Centroid")

plt.xlabel("Age")
plt.ylabel('Income')

